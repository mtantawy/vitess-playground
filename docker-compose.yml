# src https://www.digitalocean.com/community/tutorials/containerizing-a-ruby-on-rails-application-for-development-with-docker-compose

version: "3.9"

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      - database
    ports:
      # allow `scale` command using `docker-compose up --scale app=num` up to 10
      - "3000-3010:3000"
    volumes:
      - .:/app
      - gem_cache:/usr/local/bundle/gems
    restart: always
    environment:
      RAILS_ENV: production
      RAILS_LOG_TO_STDOUT: "enabled"
      # allow multiple instances to run by placing the server.pid out of the working dir
      PIDFILE: /tmp/server.pid
      INFLUXDB_TOKEN: ${INFLUXDB_TOKEN}

  database:
    image: mysql
    volumes:
      - db_data:/var/lib/mysql
    restart: always
    environment:
      MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
      MYSQL_DATABASE: vitess_playground
    healthcheck:
      test: ["CMD", "mysql", "-e show databases"]
      interval: 5s
      timeout: 3s
      retries: 10

  migration:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      database:
        condition: service_healthy
    volumes:
      - .:/app
      - gem_cache:/usr/local/bundle/gems
    command: bin/rails db:prepare
    environment:
      RAILS_ENV: production
      RAILS_LOG_TO_STDOUT: "enabled"
      # allow multiple instances to run by placing the server.pid out of the working dir
      PIDFILE: /tmp/server.pid
      INFLUXDB_TOKEN: ${INFLUXDB_TOKEN}

  # this works as a loadbalancer BUT it doesn't update containers list when re-scaling
  # so always `up` with the correct `scale` count of `app` containers
  nginx:
    image: nginx:latest
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - app
    ports:
      - "8080:8080"
      - "8086:8086"

  influxdb:
    image: influxdb
    volumes:
      - influxdb_data:/var/lib/influxdb2

  telegraf:
    image: telegraf
    volumes:
      - ./telegraf.conf:/etc/telegraf/telegraf.conf
    environment:
      INFLUXDB_TOKEN: ${INFLUXDB_TOKEN}

volumes:
  gem_cache:
  db_data:
  influxdb_data:
