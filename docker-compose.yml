# src https://www.digitalocean.com/community/tutorials/containerizing-a-ruby-on-rails-application-for-development-with-docker-compose

version: "3.0"

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      - database
    ports:
      # allow `scale` command using `docker-compose up scale app=num`
      - "3000-3010:3000"
    volumes:
      - .:/app
      - gem_cache:/usr/local/bundle/gems
    restart: always
    environment:
      RAILS_ENV: production
      RAILS_LOG_TO_STDOUT: "enabled"
      # allow multiple instances to run by placing the server.pid out of the working dir
      PIDFILE: /tmp/server.pid

  database:
    image: mysql
    # NOTE: use of "mysql_native_password" is not recommended: https://dev.mysql.com/doc/refman/8.0/en/upgrading-from-previous-series.html#upgrade-caching-sha2-password
    # (this is just an example, not intended to be a production configuration)
    command: --default-authentication-plugin=mysql_native_password
    restart: always
    environment:
      MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
      MYSQL_DATABASE: vitess_playground

  # this works as a loadbalancer BUT it doesn't update containers list when re-scaling
  # so always `up` with the correct `scale` count of `app` containers
  nginx:
    image: nginx:latest
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - app
    ports:
      - "8080:8080"

volumes:
  gem_cache:
  db_data:
